/*
    1. Render song üåü
    2. Scroll top üåü
    3. Play / pause / seek üåü
    4. CD rotate üåü
    5. Next / prev song üåü
    6. Random üåü
    7. Next / repeat when ended üåü
    8. Active song üåü
    9. Scroll active song into view
    Play song when click
*/

const $ = document.querySelector.bind(document);
const $$ = document.querySelectorAll.bind(document);

const playList = $('.playlist');
const cdElement = $('.cd');
const header = $('header h2');
const cdThumb = $('.cd-thumb');
const audio = $('#audio');
const playBtn = $('.btn-toggle-play');
const player = $('.player');
const progress = $('#progress');
const nextBtn = $('.btn-next');
const prevBtn = $('.btn-prev');
const randomBtn = $('.btn-random');
const repeatBtn = $('.btn-repeat');
console.log([repeatBtn]);

const app = {
    currentIndex: 0,
    isPlaying: false,
    isRandom: false,
    isRepeat: false,
    arrayPlayed: [false, false, false, false, false, false, false, false],
    songs: [
        {
            name: 'C∆∞·ªõi th√¥i',
            singer: 'Bray ft TAP',
            path: './assets/music/song1.mp3',
            image: './assets/img/song1.jpg'
        },
        {
            name: 'Here I Am Again',
            singer: 'Yerin Baek',
            path: './assets/music/song2.mp3',
            image: './assets/img/song2.jpg'
        },
        {
            name: 'Li·ªáu Gi·ªù',
            singer: '2T',
            path: './assets/music/song3.mp3',
            image: './assets/img/song3.jpg'
        },
        {
            name: 'M√¨nh Y√™u Nhau ƒêi',
            singer: 'B√≠ch Ph∆∞∆°ng',
            path: './assets/music/song4.mp3',
            image: './assets/img/song4.jpg'
        },
        {
            name: 'Mu·ªôn R·ªìi M√† Sao C√≤n',
            singer: 'S∆°n T√πng MTP',
            path: './assets/music/song5.mp3',
            image: './assets/img/song5.jpg'
        },
        {
            name: 'My Everything',
            singer: 'Ti√™n Ti√™n',
            path: './assets/music/song6.mp3',
            image: './assets/img/song6.jpg'
        },
        {
            name: 'NƒÉm ·∫§y',
            singer: 'ƒê·ª©c Ph√∫c',
            path: './assets/music/song7.mp3',
            image: './assets/img/song7.jpg'
        },
        {
            name: 'Say You Do',
            singer: 'Ti√™n Ti√™n',
            path: './assets/music/song8.mp3',
            image: './assets/img/song8.jpg'
        }
    ],
    defineProoerties: function () {
        Object.defineProperty(this, 'currentSong', {
            get: function () {
                return this.songs[this.currentIndex];
            },
        });
    },
    render: function () {
        const htmls = this.songs.map((song, index) => {
            return `
                <div class="song ${this.currentIndex === index ? 'active' : ''}">
                    <div class="thumb"
                        style="background-image: url('${song.image}')">
                    </div>
                    <div class="body">
                        <h3 class="title">${song.name}</h3>
                        <p class="author">${song.singer}</p>
                    </div>
                    <div class="option">
                        <i class="fas fa-ellipsis-h"></i>
                    </div>
                </div>
            `
        });
        playList.innerHTML = htmls.join('\n');
    },
    handleEven: function () {
        _this = this;
        // X·ª≠ l√Ω scroll play list
        const cdWidth = cdElement.offsetWidth;

        // X·ª≠ l√Ω quay / d·ª´ng CD ( CD rotate )
        const cdThumbAnimate = cdThumb.animate([
            { transform: 'rotate(360deg)' }
        ], {
            duration: 10000,
            iterations: Infinity
        })
        cdThumbAnimate.pause();

        document.onscroll = function () {
            const scrolTop = window.scrollY | document.documentElement.scrollTop;
            const newCDWidth = cdWidth - scrolTop;

            cdElement.style.width = newCDWidth > 0 ? newCDWidth + 'px' : 0;
            cdElement.style.opacity = newCDWidth / cdWidth;
        };

        // X·ª≠ l√Ω khi click play
        playBtn.onclick = function () {
            if (_this.isPlaying) {
                audio.pause();
            }
            else {
                audio.play();
            };

            // Khi b√†i h√°t play
            audio.onplay = function () {
                _this.isPlaying = !_this.isPlaying;
                player.classList.toggle('playing', _this.isPlaying);
                cdThumbAnimate.play();
            }
            // Khi b√†i h√°t pause
            audio.onpause = function () {
                _this.isPlaying = !_this.isPlaying;
                player.classList.toggle('playing', _this.isPlaying);
                cdThumbAnimate.pause();
            }
        };

        // Khi ti·∫øn ƒë·ªô b√†i h√°t thay ƒë·ªïi
        audio.ontimeupdate = function () {
            if (audio.duration) {
                const progressPercentage = Math.floor((audio.currentTime / audio.duration) * 100);
                progress.value = progressPercentage;
            }
        }

        // X·ª≠ l√Ω khi tua b√†i h√°t
        progress.onchange = function () {
            const seekTime = audio.duration * (this.value / 100);
            audio.currentTime = seekTime;
        }

        // X·ª≠ l√Ω khi netx b√†i h√°t
        nextBtn.onclick = function () {
            if (_this.isRandom) {
                _this.playRandomSong();
                audio.play();
            }
            else {
                _this.netxSong();
                audio.play();
            }
            _this.render();
        }
        // X·ª≠ l√Ω khi prev b√†i h√°t
        prevBtn.onclick = function () {
            if (_this.isRandom) {
                _this.playRandomSong();
                audio.play();
            }
            else {
                _this.prevSong();
                audio.play();
            }
            _this.render();
        }

        // X·ª≠ l√Ω khi random b√†i h√°t
        randomBtn.onclick = function () {
            _this.isRandom = !_this.isRandom;
            // N·∫øu _this.isRandom = true th√¨ s·∫Ω th√™m class="active" v√† ng∆∞·ª£c l·∫°i
            this.classList.toggle('active', _this.isRandom);
        }

        // X·ª≠ l√Ω l·∫≠p l·∫°i 1 b√†i h√°t
        repeatBtn.onclick = function () {
            _this.isRepeat = !_this.isRepeat;
            // N·∫øu _this.isRepeat = true th√¨ s·∫Ω th√™m class="active" v√† ng∆∞·ª£c l·∫°i
            this.classList.toggle('active', _this.isRepeat);
        }

        // X·ª≠ l√Ω next / previous khi ended b√†i h√°t
        audio.onended = function () {
            if (_this.isRepeat) {
                audio.play();
            }
            else {
                nextBtn.click();
            }
        }
    },
    loadCurrentSong: function () {
        header.textContent = this.currentSong.name;
        cdThumb.style.backgroundImage = `url("${this.currentSong.image}")`;
        audio.src = this.currentSong.path;
    },
    netxSong: function () {
        this.currentIndex++;
        if (this.currentIndex >= this.songs.length) {
            this.currentIndex = 0;
        }
        this.loadCurrentSong();
    },
    prevSong: function () {
        this.currentIndex--;
        if (this.currentIndex < 0) {
            this.currentIndex = this.songs.length - 1;
        }
        this.loadCurrentSong();
    },
    playRandomSong: function () {
        let newIndex;
        this.arrayPlayed[this.currentIndex] = true;
        do {
            // T·ªëi ∆∞u ph√°t ng·∫´u nhi√™n
            // Kh√¥ng ph√°t l·∫°i b√†i ƒë√£ ph√°t tr∆∞·ªõc ƒë√≥ khi random mode on
            this.handleArrPlayed();
            newIndex = Math.floor(Math.random() * this.songs.length);
        } while (this.arrayPlayed[newIndex]);
        this.currentIndex = newIndex;
        this.loadCurrentSong();
    },
    handleArrPlayed: function() {
        let isFull = false;
        // Ban ƒë·∫ßu m·∫£ng this.arrayPlayed ƒë∆∞·ª£c ƒë√°nh d·∫•u t·∫•t c·∫£ l√† false
        // Sau khi ƒë√£ ph√°t b√†i ƒë√≥ ·ªü random mode th√¨ s·∫Ω ƒë√°ng d·∫•u b√†i ƒë√≥ l√† true
        // Ki·ªÉm tra xem to√†n b·ªô m·∫£ng ƒë√£ l√† true h·∫øt hay ch∆∞a
        // N·∫øu r·ªìi th√¨ s·∫Ω reset l·∫°i to√†n b·ªô l√† false v√† ti·∫øp t·ª•c v√≤ng l·∫≠p
        isFull = this.arrayPlayed.every(song => song === true);
        if (isFull) {
            this.arrayPlayed.forEach(function(song, index, arr) {
                arr[index] = false;
            })
        }
    },
    start: function () {
        // ƒê·ªãnh nghƒ©a c√°c thu·ªôc t√≠nh cho object
        this.defineProoerties();
        // L·∫Øng nghe / x·ª≠ l√Ω c√°c s·ª± ki·ªán (DOM event handler)
        this.handleEven();
        // T·∫£i th√¥ng tin b√†i h√°t ƒë·∫ßu ti√™n b√†o UI khi ch·∫°y ·ª©ng d·ª•ng
        this.loadCurrentSong();
        // Render playList
        this.render();
    }
}

app.start();